# For production:
# - Consider using a separate docker-compose.prod.yml file
# - Remove development-specific volume mounts
# - Add production environment variables
# - Consider adding a database service
# - Add a reverse proxy/web server (nginx) for SSL termination

services:
  backend:
    build: ./backend
    volumes:
      - ./backend:/app  # PROD: Remove this volume mount for production
      - /app/venv
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True  # PROD: Set to False in production
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend  # PROD: Update with production domain
      # PROD: Add additional environment variables like:
      # - SECRET_KEY=your-production-secret-key
      # - DATABASE_URL=postgres://user:password@db:5432/dbname
    restart: unless-stopped

  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app  # PROD: Remove this volume mount for production
      - /app/node_modules
    ports:
      - "5173:5173"  # PROD: In production, this would typically be handled by nginx
    depends_on:
      - backend
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:8000/api  # PROD: Update with production API URL

  # PROD: Add a database service for production
  # db:
  #   image: postgres:14
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_PASSWORD=your-password
  #     - POSTGRES_USER=your-user
  #     - POSTGRES_DB=your-db-name
  #   restart: unless-stopped

  # PROD: Add a web server for production
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/conf.d:/etc/nginx/conf.d
  #     - ./certbot/www:/var/www/certbot
  #     - ./certbot/conf:/etc/letsencrypt
  #   depends_on:
  #     - backend
  #     - frontend
  #   restart: unless-stopped

# PROD: Add volumes for persistent data
# volumes:
#   postgres_data: 